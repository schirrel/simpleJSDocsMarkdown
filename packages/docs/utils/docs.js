// Imports
const jsdoc2md = require('jsdoc-to-markdown');
const { filenameAdjust } = require('./file');

// Constants
const mdLineScape = '   \n';
const docTitle = 'My Doc Title';

// Functions
const markdownLink = (text, link) => `[${text}](${link})`;

const capitalizeFirstLetter = (string) => (string.charAt(0).toUpperCase() + string.slice(1)).replace(/\-/g, " ");


const generateFooter = () => {
    return `________________________________  ${mdLineScape}__${docTitle}__  ${mdLineScape}_Last modified:  ${new Intl.DateTimeFormat('en-GB', {
        dateStyle: 'full',
        timeStyle: 'long',
        timeZone: 'America/Los_Angeles',
    }).format(new Date())}_ ${mdLineScape}This documentation is autogenerated.`
}

const generateIndexHeader = (file) => {
    let header = '';
    const templateData = jsdoc2md.getTemplateDataSync({
        files: file,
    })
    const fileDir = file.replace('/index.js', '').split('/').pop();

    if (templateData?.[0]) {
        const fileDoc = templateData[0];
        header += `# ${fileDoc.longname} ${mdLineScape} ${fileDoc.description} ${mdLineScape}`
        const customTagInfo = fileDoc?.customTags?.find(tag => tag.tag === 'info')
        if (customTagInfo) {
            header += customTagInfo.value + mdLineScape;
        }
    } else {
        header += `# ${capitalizeFirstLetter(fileDir)} ${mdLineScape}`

    }
    header += `## Summary ${mdLineScape}`

    return header;
}

const generateBreadCrumb = (file) => {
    const filePaths = filenameAdjust(file).split('/');
    // remove file
    filePaths.pop();
    let template = ``;

    let path = '';
    for (let i = 0; i < filePaths.length - 1; i++) {
        path += filePaths[i] + '/';
        template += markdownLink(filePaths[i], Array(filePaths.length - (i + 1)).fill('../').join('') + 'README.md') + ' / '

    }
    template += markdownLink(filePaths[filePaths.length - 1], 'README.md') + ' / '

    return template + mdLineScape;

}

const shouldSkipLine = (line) => !line || line.startsWith(' *') || line.startsWith('*') || line.startsWith('/')


module.exports = {
    markdownLink, capitalizeFirstLetter, generateFooter, generateIndexHeader, generateBreadCrumb, shouldSkipLine
}